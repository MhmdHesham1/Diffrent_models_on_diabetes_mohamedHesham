# -*- coding: utf-8 -*-
"""Diffrent_models_on_diabetes_mohamedHesham.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DUXgphSMGjGldoPFU8FR0x9BVo8IC9DT
"""

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn import tree
from sklearn.metrics import accuracy_score
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.linear_model import LogisticRegression
import pandas as pd

rawdata=pd.read_csv("/content/pima-indians-diabetes.csv")
rawdata

x=rawdata.iloc[:,0:8]
x

y=rawdata.iloc[:,8:9]
y

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2)

"""# **Desicion Tree**"""

clf=tree.DecisionTreeClassifier()
 clf.fit(x_train, y_train)
 predictions = clf.predict(x_train)# predict the output for the test to see if the model is under fitting
 accuracy_score(y_train, predictions)

clf=tree.DecisionTreeClassifier()
clf.fit(x_train, y_train)
predictions1 = clf.predict(x_test)# predict the output for the test to see if the model is good fitting
accuracy_score(y_test, predictions1)

"""# **Random forest**"""

clf1= RandomForestClassifier(n_estimators=5, max_depth=5, random_state=0)
clf1.fit(x_train, y_train)
predictions2 = clf1.predict(x_train)# predict the output for the test to see if the model is under fitting
accuracy_score(y_train, predictions2)

clf1= RandomForestClassifier(n_estimators=5, max_depth=5, random_state=0)
clf1.fit(x_train, y_train)
predictions3 = clf1.predict(x_test)# predict the output for the test to see if the model is good fitting
accuracy_score(y_test, predictions3)

"""# **Boosting**"""

clf2 = GradientBoostingClassifier(n_estimators=5, max_depth=5, random_state=0)
clf2.fit(x_train, y_train)
predictions4 = clf2.predict(x_train)# predict the output for the test to see if the model is under fitting
accuracy_score(y_train, predictions4)

clf2 = GradientBoostingClassifier(n_estimators=5, max_depth=5, random_state=0)
clf2.fit(x_train, y_train)
predictions5 = clf2.predict(x_test)# predict the output for the test to see if the model is good fitting
accuracy_score(y_test, predictions5)

"""# Logisitc Reg"""

clf3 = LogisticRegression(random_state=1)
clf3.fit(x_train, y_train)# train the model by using the data
predictions6 = clf3.predict(x_train)# predict the output
accuracy_score(y_train, predictions6)

clf3 = LogisticRegression(random_state=1)
clf3.fit(x_train, y_train)# train the model by using the data
predictions7 = clf3.predict(x_test)# predict the output
accuracy_score(y_test, predictions7)